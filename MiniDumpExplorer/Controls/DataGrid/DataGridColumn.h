#pragma once

#include "DataGridColumn.g.h"

#include "Utility/BindingInfo.h"

namespace winrt::MiniDumpExplorer::implementation
{
    struct DataGrid;
    struct DataGridCell;
    struct DataGridColumnHeader;
    struct DataGridLength;
    struct DataGridRow;

    struct DataGridColumn : DataGridColumnT<DataGridColumn>
    {
    protected:
        DataGridColumn();

    public:
        static constexpr auto InvalidIndex = int32_t{-1};

        double ActualWidth() const;
        bool CanUserReorder() const;
        void CanUserReorder(bool value);
        bool CanUserResize() const;
        void CanUserResize(bool value);
        bool CanUserSort() const;
        void CanUserSort(bool value);
        Microsoft::UI::Xaml::Style CellStyle() const;
        void CellStyle(Microsoft::UI::Xaml::Style const& value);
        virtual Microsoft::UI::Xaml::Data::Binding ClipboardContentBinding() const;
        void ClipboardContentBinding(Microsoft::UI::Xaml::Data::Binding const& value);
        int32_t DisplayIndex() const;
        void DisplayIndex(int32_t value);
        Microsoft::UI::Xaml::Style DragIndicatorStyle() const;
        void DragIndicatorStyle(Microsoft::UI::Xaml::Style const& value);
        Microsoft::UI::Xaml::Style HeaderStyle() const;
        void HeaderStyle(Microsoft::UI::Xaml::Style const& value);
        Windows::Foundation::IInspectable Header() const;
        void Header(Windows::Foundation::IInspectable const& value);
        bool IsAutoGenerated() const;
        void IsAutoGenerated(bool value);
        bool IsFrozen() const;
        void IsFrozen(bool value);
        bool IsReadOnly() const;
        void IsReadOnly(bool value);
        double MaxWidth() const;
        void MaxWidth(double value);
        double MinWidth() const;
        void MinWidth(double value);
        Windows::Foundation::IReference<DataGridSortDirection> SortDirection() const;
        void SortDirection(Windows::Foundation::IReference<DataGridSortDirection> const& value);
        Windows::Foundation::IInspectable Tag() const;
        void Tag(Windows::Foundation::IInspectable const& value);
        Microsoft::UI::Xaml::Visibility Visibility() const;
        void Visibility(Microsoft::UI::Xaml::Visibility value);
        Windows::Foundation::IInspectable Width() const;
        void Width(Windows::Foundation::IInspectable const& value);
        MiniDumpExplorer::DataGridLength WidthLength() const;
        void WidthLength(MiniDumpExplorer::DataGridLength const& value);

        bool ActualCanUserResize() const;
        double ActualMaxWidth() const;
        double ActualMinWidth() const;
        std::vector<std::wstring> const& BindingPaths();

        std::optional<bool> const& CanUserReorderInternal() const { return canUserReorderInternal_; }
        void CanUserReorderInternal(std::optional<bool> const& value) { canUserReorderInternal_ = value; }

        std::optional<bool> const& CanUserResizeInternal() const { return canUserResizeInternal_; }
        void CanUserResizeInternal(std::optional<bool> const& value) { canUserResizeInternal_ = value; }

        std::optional<bool> const& CanUserSortInternal() const { return canUserSortInternal_; }
        void CanUserSortInternal(std::optional<bool> const& value) { canUserSortInternal_ = value; }

        bool DisplayIndexHasChanged() const { return displayIndexHasChanged_; }
        void DisplayIndexHasChanged(bool const value) { displayIndexHasChanged_ = value; }

        int32_t DisplayIndexWithFiller() const { return displayIndexWithFiller_; }
        void DisplayIndexWithFiller(int32_t value);

        bool HasHeaderCell() const { return static_cast<bool>(headerCell_); }
        MiniDumpExplorer::DataGridColumnHeader HeaderCell();

        int32_t Index() const { return index_; }
        void Index(int32_t const value) { index_ = value; }

        bool InheritsWidth() const { return inheritsWidth_; }

        bool IsInitialDesiredWidthDetermined() const { return isInitialDesiredWidthDetermined_; }
        void IsInitialDesiredWidthDetermined(bool const value) { isInitialDesiredWidthDetermined_ = value; }

        bool IsVisible() const { return visibility_ == Microsoft::UI::Xaml::Visibility::Visible; }

        double LayoutRoundedWidth() const { return layoutRoundedWidth_; }

        MiniDumpExplorer::DataGrid OwningGrid() { return owningGrid_; }
        void OwningGrid(MiniDumpExplorer::DataGrid const& value) { owningGrid_ = value; }

        static MiniDumpExplorer::DataGridColumn GetColumnContainingElement(Microsoft::UI::Xaml::FrameworkElement const& element);
        Microsoft::UI::Xaml::FrameworkElement GetCellContentFromRow(MiniDumpExplorer::DataGridRow const& dataGridRow) const;
        Microsoft::UI::Xaml::FrameworkElement GetCellContent(Windows::Foundation::IInspectable const& dataItem) const;

        MiniDumpExplorer::DataGridLength CoerceWidth(MiniDumpExplorer::DataGridLength const& width) const;
        void ComputeLayoutRoundedWidth(double leftEdge);

        virtual MiniDumpExplorer::DataGridColumnHeader CreateHeader();

        void EnsureWidth();
        Microsoft::UI::Xaml::FrameworkElement GenerateElementInternal(MiniDumpExplorer::DataGridCell const& cell, Windows::Foundation::IInspectable const& dataItem);
        Windows::Foundation::IInspectable GetCellValue(Windows::Foundation::IInspectable const& item, Microsoft::UI::Xaml::Data::Binding const& binding) const;
        std::vector<Utility::BindingInfo> GetInputBindings(Microsoft::UI::Xaml::FrameworkElement const& element, Windows::Foundation::IInspectable const& dataItem);
        Windows::Foundation::IInspectable PrepareCellForEditInternal(Microsoft::UI::Xaml::FrameworkElement const& editingElement, Microsoft::UI::Xaml::RoutedEventArgs const& editingEventArgs);
        void RemoveEditingElement();
        void Resize(double value, DataGridLengthUnitType unitType, double desiredValue, double displayValue, bool userInitiated);

        void SetWidthDesiredValue(double desiredValue);
        void SetWidthDisplayValue(double displayValue);
        void SetWidthInternalNoCallback(MiniDumpExplorer::DataGridLength const& width);
        void SetWidthStarValue(double value);

        virtual void RefreshForeground(Microsoft::UI::Xaml::FrameworkElement const& element, Microsoft::UI::Xaml::Media::Brush const& computedRowForeground);

        void CancelCellEditInternal(Microsoft::UI::Xaml::FrameworkElement const& editingElement, Windows::Foundation::IInspectable const& uneditedValue)
        {
            CancelCellEdit(editingElement, uneditedValue);
        }

        Microsoft::UI::Xaml::FrameworkElement GenerateEditingElementInternal(MiniDumpExplorer::DataGridCell const& cell, Windows::Foundation::IInspectable const& dataItem);

        // ReSharper disable CppFunctionIsNotImplemented
        auto InternalOwningGrid() const;
        auto InternalHeaderCell() const;
        // ReSharper restore CppFunctionIsNotImplemented

        virtual void RefreshCellContent(Microsoft::UI::Xaml::FrameworkElement const& element, Microsoft::UI::Xaml::Media::Brush const& computedRowForeground, std::wstring_view const& propertyName);

        virtual bool IsDataGridFillerColumn() const { return false; }

    protected:
        virtual void CancelCellEdit(Microsoft::UI::Xaml::FrameworkElement const& editingElement, Windows::Foundation::IInspectable const& uneditedValue);
        virtual Microsoft::UI::Xaml::FrameworkElement GenerateEditingElement(MiniDumpExplorer::DataGridCell const& cell, Windows::Foundation::IInspectable const& dataItem);
        virtual Microsoft::UI::Xaml::FrameworkElement GenerateElement(MiniDumpExplorer::DataGridCell const& cell, Windows::Foundation::IInspectable const& dataItem);
        virtual Windows::Foundation::IInspectable PrepareCellForEdit(Microsoft::UI::Xaml::FrameworkElement const& editingElement, Microsoft::UI::Xaml::RoutedEventArgs const& editingEventArgs);

        void NotifyPropertyChanged(std::wstring_view const& propertyName) const;

        virtual std::vector<std::wstring> CreateBindingPaths();
        virtual std::vector<Utility::BindingInfo> CreateBindings(Microsoft::UI::Xaml::FrameworkElement const& element, Windows::Foundation::IInspectable const& dataItem, bool twoWay);

    private:
        Microsoft::UI::Xaml::Visibility visibility_{Microsoft::UI::Xaml::Visibility::Visible};
        int32_t displayIndexWithFiller_{-1};
        bool isInitialDesiredWidthDetermined_{false};
        bool inheritsWidth_{true};
        std::vector<std::wstring> bindingPaths_;
        bool bindingPathsCreated_{false};
        Microsoft::UI::Xaml::Style cellStyle_{nullptr};
        Microsoft::UI::Xaml::Data::Binding clipboardContentBinding_{nullptr};
        Microsoft::UI::Xaml::Style dragIndicatorStyle_{nullptr};
        Microsoft::UI::Xaml::FrameworkElement editingElement_{nullptr};
        Windows::Foundation::IInspectable header_{nullptr};
        MiniDumpExplorer::DataGridColumnHeader headerCell_{nullptr};
        Microsoft::UI::Xaml::Style headerStyle_{nullptr};
        std::vector<Utility::BindingInfo> inputBindings_;
        bool inputBindingsCreated_{false};
        std::optional<bool> isReadOnly_;
        std::optional<double> maxWidth_;
        std::optional<double> minWidth_;
        bool settingWidthInternally_{false};
        MiniDumpExplorer::DataGridLength width_{nullptr}; // Null by default, null means inherit the Width from the DataGrid
        std::optional<DataGridSortDirection> sortDirection_;
        MiniDumpExplorer::DataGrid owningGrid_{nullptr};
        std::optional<bool> canUserReorderInternal_;
        std::optional<bool> canUserResizeInternal_;
        std::optional<bool> canUserSortInternal_;
        bool displayIndexHasChanged_{false};
        bool isAutoGenerated_{false};
        bool isFrozen_{false};
        Windows::Foundation::IInspectable tag_{nullptr};
        int32_t index_{0};
        double layoutRoundedWidth_{0.0};
    };
}

namespace winrt::MiniDumpExplorer::factory_implementation
{
    struct DataGridColumn : DataGridColumnT<DataGridColumn, implementation::DataGridColumn>
    {
    };
}
