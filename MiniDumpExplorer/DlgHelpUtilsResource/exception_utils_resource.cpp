#include "pch.h"
#include "DbgHelpUtils/exception_utils.h"

#include <winrt/Microsoft.Windows.ApplicationModel.Resources.h>

#include "DbgHelpUtils/flags_string_utils.h"
// ReSharper disable once CppUnusedIncludeDirective
#include "DbgHelpUtils/windows_setup.h"
#include "Utility/GetResourceValue.h"

using namespace std::string_literals;
using namespace std::string_view_literals;

namespace dlg_help_utils::exception_utils
{
    namespace
    {
        std::unordered_map<uint32_t, std::wstring> const& exception_flags_map()
        {
            winrt::Microsoft::Windows::ApplicationModel::Resources::ResourceManager const rm{};

            static std::unordered_map<uint32_t, std::wstring> const exception_flags =
            {
                {EXCEPTION_NONCONTINUABLE, std::wstring{rm.MainResourceMap().GetValue(L"Resources/EXCEPTION_NONCONTINUABLE").ValueAsString()}},//, L"EXCEPTION_NONCONTINUABLE"s},
                {EXCEPTION_UNWINDING, std::wstring{rm.MainResourceMap().GetValue(L"Resources/EXCEPTION_UNWINDING").ValueAsString()}},//, L"EXCEPTION_UNWINDING"s},
                {EXCEPTION_EXIT_UNWIND, std::wstring{rm.MainResourceMap().GetValue(L"Resources/EXCEPTION_EXIT_UNWIND").ValueAsString()}},//, L"EXCEPTION_EXIT_UNWIND"s},
                {EXCEPTION_STACK_INVALID, std::wstring{rm.MainResourceMap().GetValue(L"Resources/EXCEPTION_STACK_INVALID").ValueAsString()}},//, L"EXCEPTION_STACK_INVALID"s},
                {EXCEPTION_NESTED_CALL, std::wstring{rm.MainResourceMap().GetValue(L"Resources/EXCEPTION_NESTED_CALL").ValueAsString()}},//, L"EXCEPTION_NESTED_CALL"s},
                {EXCEPTION_TARGET_UNWIND, std::wstring{rm.MainResourceMap().GetValue(L"Resources/EXCEPTION_TARGET_UNWIND").ValueAsString()}},//, L"EXCEPTION_NESTED_CALL"s},
                {EXCEPTION_COLLIDED_UNWIND, std::wstring{rm.MainResourceMap().GetValue(L"Resources/EXCEPTION_COLLIDED_UNWIND").ValueAsString()}},//, L"EXCEPTION_NESTED_CALL"s},
            };

            return exception_flags;
        }
    }

    std::vector<std::wstring_view> exception_flags_to_list(uint32_t const exception_flags)
    {
        return flags_string_utils::generate_flags_strings(exception_flags, exception_flags_map());
    }

    namespace resources
    {

    std::unordered_map<uint32_t, std::wstring> const& get_exception_code_descriptions()
    {
        winrt::Microsoft::Windows::ApplicationModel::Resources::ResourceManager const rm{};

        static std::unordered_map<uint32_t, std::wstring> const exception_code_descriptions =
        {
            // bug check code reference: https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/bug-check-code-reference2
            {0x00000001, std::wstring{rm.MainResourceMap().GetValue(L"Resources/APC_INDEX_MISMATCH").ValueAsString()}},
            {0x00000002, std::wstring{rm.MainResourceMap().GetValue(L"Resources/DEVICE_QUEUE_NOT_BUSY").ValueAsString()}},
            {0x00000003, std::wstring{rm.MainResourceMap().GetValue(L"Resources/INVALID_AFFINITY_SET").ValueAsString()}},
            {0x00000004, std::wstring{rm.MainResourceMap().GetValue(L"Resources/INVALID_DATA_ACCESS_TRAP").ValueAsString()}},
            {0x00000005, std::wstring{rm.MainResourceMap().GetValue(L"Resources/INVALID_PROCESS_ATTACH_ATTEMPT").ValueAsString()}},
            {0x00000006, std::wstring{rm.MainResourceMap().GetValue(L"Resources/INVALID_PROCESS_DETACH_ATTEMPT").ValueAsString()}},
            {0x00000007, std::wstring{rm.MainResourceMap().GetValue(L"Resources/INVALID_SOFTWARE_INTERRUPT").ValueAsString()}},
            {0x00000008, std::wstring{rm.MainResourceMap().GetValue(L"Resources/IRQL_NOT_DISPATCH_LEVEL").ValueAsString()}},
            {0x00000009, std::wstring{rm.MainResourceMap().GetValue(L"Resources/IRQL_NOT_GREATER_OR_EQUAL").ValueAsString()}},
            {0x0000000A, std::wstring{rm.MainResourceMap().GetValue(L"Resources/IRQL_NOT_LESS_OR_EQUAL").ValueAsString()}},
            {0x0000000B, std::wstring{rm.MainResourceMap().GetValue(L"Resources/NO_EXCEPTION_HANDLING_SUPPORT").ValueAsString()}},
            {0x0000000C, std::wstring{rm.MainResourceMap().GetValue(L"Resources/MAXIMUM_WAIT_OBJECTS_EXCEEDED").ValueAsString()}},
            {0x0000000D, std::wstring{rm.MainResourceMap().GetValue(L"Resources/MUTEX_LEVEL_NUMBER_VIOLATION").ValueAsString()}},
            {0x0000000E, std::wstring{rm.MainResourceMap().GetValue(L"Resources/NO_USER_MODE_CONTEXT").ValueAsString()}},
            {0x0000000F, std::wstring{rm.MainResourceMap().GetValue(L"Resources/SPIN_LOCK_ALREADY_OWNED").ValueAsString()}},
            {0x00000010, std::wstring{rm.MainResourceMap().GetValue(L"Resources/SPIN_LOCK_NOT_OWNED").ValueAsString()}},
            {0x00000011, std::wstring{rm.MainResourceMap().GetValue(L"Resources/THREAD_NOT_MUTEX_OWNER").ValueAsString()}},
            {0x00000012, std::wstring{rm.MainResourceMap().GetValue(L"Resources/TRAP_CAUSE_UNKNOWN").ValueAsString()}},
            {0x00000013, std::wstring{rm.MainResourceMap().GetValue(L"Resources/EMPTY_THREAD_REAPER_LIST").ValueAsString()}},
            {0x00000014, std::wstring{rm.MainResourceMap().GetValue(L"Resources/CREATE_DELETE_LOCK_NOT_LOCKED").ValueAsString()}},
            {0x00000015, std::wstring{rm.MainResourceMap().GetValue(L"Resources/LAST_CHANCE_CALLED_FROM_KMODE").ValueAsString()}},
            {0x00000016, std::wstring{rm.MainResourceMap().GetValue(L"Resources/CID_HANDLE_CREATION").ValueAsString()}},
            {0x00000017, std::wstring{rm.MainResourceMap().GetValue(L"Resources/CID_HANDLE_DELETION").ValueAsString()}},
            {0x00000018, std::wstring{rm.MainResourceMap().GetValue(L"Resources/REFERENCE_BY_POINTER").ValueAsString()}},
            {0x00000019, std::wstring{rm.MainResourceMap().GetValue(L"Resources/BAD_POOL_HEADER").ValueAsString()}},
            {0x0000001A, std::wstring{rm.MainResourceMap().GetValue(L"Resources/MEMORY_MANAGEMENT").ValueAsString()}},
            {0x0000001B, std::wstring{rm.MainResourceMap().GetValue(L"Resources/PFN_SHARE_COUNT").ValueAsString()}},
            {0x0000001C, std::wstring{rm.MainResourceMap().GetValue(L"Resources/PFN_REFERENCE_COUNT").ValueAsString()}},
            {0x0000001D, std::wstring{rm.MainResourceMap().GetValue(L"Resources/NO_SPIN_LOCK_AVAILABLE").ValueAsString()}},
            {0x0000001E, std::wstring{rm.MainResourceMap().GetValue(L"Resources/KMODE_EXCEPTION_NOT_HANDLED").ValueAsString()}},
            {0x0000001F, std::wstring{rm.MainResourceMap().GetValue(L"Resources/SHARED_RESOURCE_CONV_ERROR").ValueAsString()}},
            {0x00000020, std::wstring{rm.MainResourceMap().GetValue(L"Resources/KERNEL_APC_PENDING_DURING_EXIT").ValueAsString()}},
            {0x00000021, std::wstring{rm.MainResourceMap().GetValue(L"Resources/QUOTA_UNDERFLOW").ValueAsString()}},
            {0x00000022, std::wstring{rm.MainResourceMap().GetValue(L"Resources/FILE_SYSTEM").ValueAsString()}},
            {0x00000023, std::wstring{rm.MainResourceMap().GetValue(L"Resources/FAT_FILE_SYSTEM").ValueAsString()}},
            {0x00000024, std::wstring{rm.MainResourceMap().GetValue(L"Resources/NTFS_FILE_SYSTEM").ValueAsString()}},
            {0x00000025, std::wstring{rm.MainResourceMap().GetValue(L"Resources/NPFS_FILE_SYSTEM").ValueAsString()}},
            {0x00000026, std::wstring{rm.MainResourceMap().GetValue(L"Resources/CDFS_FILE_SYSTEM").ValueAsString()}},
            {0x00000027, std::wstring{rm.MainResourceMap().GetValue(L"Resources/RDR_FILE_SYSTEM").ValueAsString()}},
            {0x00000028, std::wstring{rm.MainResourceMap().GetValue(L"Resources/CORRUPT_ACCESS_TOKEN").ValueAsString()}},
            {0x00000029, std::wstring{rm.MainResourceMap().GetValue(L"Resources/SECURITY_SYSTEM").ValueAsString()}},
            {0x0000002A, std::wstring{rm.MainResourceMap().GetValue(L"Resources/INCONSISTENT_IRP").ValueAsString()}},
            {0x0000002B, std::wstring{rm.MainResourceMap().GetValue(L"Resources/PANIC_STACK_SWITCH").ValueAsString()}},
            {0x0000002C, std::wstring{rm.MainResourceMap().GetValue(L"Resources/PORT_DRIVER_INTERNAL").ValueAsString()}},
            {0x0000002D, std::wstring{rm.MainResourceMap().GetValue(L"Resources/SCSI_DISK_DRIVER_INTERNAL").ValueAsString()}},
            {0x0000002E, std::wstring{rm.MainResourceMap().GetValue(L"Resources/DATA_BUS_ERROR").ValueAsString()}},
            {0x0000002F, std::wstring{rm.MainResourceMap().GetValue(L"Resources/INSTRUCTION_BUS_ERROR").ValueAsString()}},
            {0x00000030, std::wstring{rm.MainResourceMap().GetValue(L"Resources/SET_OF_INVALID_CONTEXT").ValueAsString()}},
            {0x00000031, std::wstring{rm.MainResourceMap().GetValue(L"Resources/PHASE0_INITIALIZATION_FAILED").ValueAsString()}},
            {0x00000032, std::wstring{rm.MainResourceMap().GetValue(L"Resources/PHASE1_INITIALIZATION_FAILED").ValueAsString()}},
            {0x00000033, std::wstring{rm.MainResourceMap().GetValue(L"Resources/UNEXPECTED_INITIALIZATION_CALL").ValueAsString()}},
            {0x00000034, std::wstring{rm.MainResourceMap().GetValue(L"Resources/CACHE_MANAGER").ValueAsString()}},
            {0x00000035, std::wstring{rm.MainResourceMap().GetValue(L"Resources/NO_MORE_IRP_STACK_LOCATIONS").ValueAsString()}},
            {0x00000036, std::wstring{rm.MainResourceMap().GetValue(L"Resources/DEVICE_REFERENCE_COUNT_NOT_ZERO").ValueAsString()}},
            {0x00000037, std::wstring{rm.MainResourceMap().GetValue(L"Resources/FLOPPY_INTERNAL_ERROR").ValueAsString()}},
            {0x00000038, std::wstring{rm.MainResourceMap().GetValue(L"Resources/SERIAL_DRIVER_INTERNAL").ValueAsString()}},
            {0x00000039, std::wstring{rm.MainResourceMap().GetValue(L"Resources/SYSTEM_EXIT_OWNED_MUTEX").ValueAsString()}},
            {0x0000003A, std::wstring{rm.MainResourceMap().GetValue(L"Resources/SYSTEM_UNWIND_PREVIOUS_USER").ValueAsString()}},
            {0x0000003B, std::wstring{rm.MainResourceMap().GetValue(L"Resources/SYSTEM_SERVICE_EXCEPTION").ValueAsString()}},
            {0x0000003C, std::wstring{rm.MainResourceMap().GetValue(L"Resources/INTERRUPT_UNWIND_ATTEMPTED").ValueAsString()}},
            {0x0000003D, std::wstring{rm.MainResourceMap().GetValue(L"Resources/INTERRUPT_EXCEPTION_NOT_HANDLED").ValueAsString()}},
            {0x0000003E, std::wstring{rm.MainResourceMap().GetValue(L"Resources/MULTIPROCESSOR_CONFIGURATION_NOT_SUPPORTED").ValueAsString()}},
            {0x0000003F, std::wstring{rm.MainResourceMap().GetValue(L"Resources/NO_MORE_SYSTEM_PTES").ValueAsString()}},
            {0x00000040, std::wstring{rm.MainResourceMap().GetValue(L"Resources/TARGET_MDL_TOO_SMALL").ValueAsString()}},
            {0x00000041, std::wstring{rm.MainResourceMap().GetValue(L"Resources/MUST_SUCCEED_POOL_EMPTY").ValueAsString()}},
            {0x00000042, std::wstring{rm.MainResourceMap().GetValue(L"Resources/ATDISK_DRIVER_INTERNAL").ValueAsString()}},
            {0x00000043, std::wstring{rm.MainResourceMap().GetValue(L"Resources/NO_SUCH_PARTITION").ValueAsString()}},
            {0x00000044, std::wstring{rm.MainResourceMap().GetValue(L"Resources/MULTIPLE_IRP_COMPLETE_REQUESTS").ValueAsString()}},
            {0x00000045, std::wstring{rm.MainResourceMap().GetValue(L"Resources/INSUFFICIENT_SYSTEM_MAP_REGS").ValueAsString()}},
            {0x00000046, std::wstring{rm.MainResourceMap().GetValue(L"Resources/DEREF_UNKNOWN_LOGON_SESSION").ValueAsString()}},
            {0x00000047, std::wstring{rm.MainResourceMap().GetValue(L"Resources/REF_UNKNOWN_LOGON_SESSION").ValueAsString()}},
            {0x00000048, std::wstring{rm.MainResourceMap().GetValue(L"Resources/CANCEL_STATE_IN_COMPLETED_IRP").ValueAsString()}},
            {0x00000049, std::wstring{rm.MainResourceMap().GetValue(L"Resources/PAGE_FAULT_WITH_INTERRUPTS_OFF").ValueAsString()}},
            {0x0000004A, std::wstring{rm.MainResourceMap().GetValue(L"Resources/IRQL_GT_ZERO_AT_SYSTEM_SERVICE").ValueAsString()}},
            {0x0000004B, std::wstring{rm.MainResourceMap().GetValue(L"Resources/STREAMS_INTERNAL_ERROR").ValueAsString()}},
            {0x0000004C, std::wstring{rm.MainResourceMap().GetValue(L"Resources/FATAL_UNHANDLED_HARD_ERROR").ValueAsString()}},
            {0x0000004D, std::wstring{rm.MainResourceMap().GetValue(L"Resources/NO_PAGES_AVAILABLE").ValueAsString()}},
            {0x0000004E, std::wstring{rm.MainResourceMap().GetValue(L"Resources/PFN_LIST_CORRUPT").ValueAsString()}},
            {0x0000004F, std::wstring{rm.MainResourceMap().GetValue(L"Resources/NDIS_INTERNAL_ERROR").ValueAsString()}},
            {0x00000050, std::wstring{rm.MainResourceMap().GetValue(L"Resources/PAGE_FAULT_IN_NONPAGED_AREA").ValueAsString()}},
            {0x00000051, std::wstring{rm.MainResourceMap().GetValue(L"Resources/REGISTRY_ERROR").ValueAsString()}},
            {0x00000052, std::wstring{rm.MainResourceMap().GetValue(L"Resources/MAILSLOT_FILE_SYSTEM").ValueAsString()}},
            {0x00000053, std::wstring{rm.MainResourceMap().GetValue(L"Resources/NO_BOOT_DEVICE").ValueAsString()}},
            {0x00000054, std::wstring{rm.MainResourceMap().GetValue(L"Resources/LM_SERVER_INTERNAL_ERROR").ValueAsString()}},
            {0x00000055, std::wstring{rm.MainResourceMap().GetValue(L"Resources/DATA_COHERENCY_EXCEPTION").ValueAsString()}},
            {0x00000056, std::wstring{rm.MainResourceMap().GetValue(L"Resources/INSTRUCTION_COHERENCY_EXCEPTION").ValueAsString()}},
            {0x00000057, std::wstring{rm.MainResourceMap().GetValue(L"Resources/XNS_INTERNAL_ERROR").ValueAsString()}},
            {0x00000058, std::wstring{rm.MainResourceMap().GetValue(L"Resources/FTDISK_INTERNAL_ERROR").ValueAsString()}},
            {0x00000059, std::wstring{rm.MainResourceMap().GetValue(L"Resources/PINBALL_FILE_SYSTEM").ValueAsString()}},
            {0x0000005A, std::wstring{rm.MainResourceMap().GetValue(L"Resources/CRITICAL_SERVICE_FAILED").ValueAsString()}},
            {0x0000005B, std::wstring{rm.MainResourceMap().GetValue(L"Resources/SET_ENV_VAR_FAILED").ValueAsString()}},
            {0x0000005C, std::wstring{rm.MainResourceMap().GetValue(L"Resources/HAL_INITIALIZATION_FAILED").ValueAsString()}},
            {0x0000005D, std::wstring{rm.MainResourceMap().GetValue(L"Resources/UNSUPPORTED_PROCESSOR").ValueAsString()}},
            {0x0000005E, std::wstring{rm.MainResourceMap().GetValue(L"Resources/OBJECT_INITIALIZATION_FAILED").ValueAsString()}},
            {0x0000005F, std::wstring{rm.MainResourceMap().GetValue(L"Resources/SECURITY_INITIALIZATION_FAILED").ValueAsString()}},
            {0x00000060, std::wstring{rm.MainResourceMap().GetValue(L"Resources/PROCESS_INITIALIZATION_FAILED").ValueAsString()}},
            {0x00000061, std::wstring{rm.MainResourceMap().GetValue(L"Resources/HAL1_INITIALIZATION_FAILED").ValueAsString()}},
            {0x00000062, std::wstring{rm.MainResourceMap().GetValue(L"Resources/OBJECT1_INITIALIZATION_FAILED").ValueAsString()}},
            {0x00000063, std::wstring{rm.MainResourceMap().GetValue(L"Resources/SECURITY1_INITIALIZATION_FAILED").ValueAsString()}},
            {0x00000064, std::wstring{rm.MainResourceMap().GetValue(L"Resources/SYMBOLIC_INITIALIZATION_FAILED").ValueAsString()}},
            {0x00000065, std::wstring{rm.MainResourceMap().GetValue(L"Resources/MEMORY1_INITIALIZATION_FAILED").ValueAsString()}},
            {0x00000066, std::wstring{rm.MainResourceMap().GetValue(L"Resources/CACHE_INITIALIZATION_FAILED").ValueAsString()}},
            {0x00000067, std::wstring{rm.MainResourceMap().GetValue(L"Resources/CONFIG_INITIALIZATION_FAILED").ValueAsString()}},
            {0x00000068, std::wstring{rm.MainResourceMap().GetValue(L"Resources/FILE_INITIALIZATION_FAILED").ValueAsString()}},
            {0x00000069, std::wstring{rm.MainResourceMap().GetValue(L"Resources/IO1_INITIALIZATION_FAILED").ValueAsString()}},
            {0x0000006A, std::wstring{rm.MainResourceMap().GetValue(L"Resources/LPC_INITIALIZATION_FAILED").ValueAsString()}},
            {0x0000006B, std::wstring{rm.MainResourceMap().GetValue(L"Resources/PROCESS1_INITIALIZATION_FAILED").ValueAsString()}},
            {0x0000006C, std::wstring{rm.MainResourceMap().GetValue(L"Resources/REFMON_INITIALIZATION_FAILED").ValueAsString()}},
            {0x0000006D, std::wstring{rm.MainResourceMap().GetValue(L"Resources/SESSION1_INITIALIZATION_FAILED").ValueAsString()}},
            {0x0000006E, std::wstring{rm.MainResourceMap().GetValue(L"Resources/SESSION2_INITIALIZATION_FAILED").ValueAsString()}},
            {0x0000006F, std::wstring{rm.MainResourceMap().GetValue(L"Resources/SESSION3_INITIALIZATION_FAILED").ValueAsString()}},
            {0x00000070, std::wstring{rm.MainResourceMap().GetValue(L"Resources/SESSION4_INITIALIZATION_FAILED").ValueAsString()}},
            {0x00000071, std::wstring{rm.MainResourceMap().GetValue(L"Resources/SESSION5_INITIALIZATION_FAILED").ValueAsString()}},
            {0x00000072, std::wstring{rm.MainResourceMap().GetValue(L"Resources/ASSIGN_DRIVE_LETTERS_FAILED").ValueAsString()}},
            {0x00000073, std::wstring{rm.MainResourceMap().GetValue(L"Resources/CONFIG_LIST_FAILED").ValueAsString()}},
            {0x00000074, std::wstring{rm.MainResourceMap().GetValue(L"Resources/BAD_SYSTEM_CONFIG_INFO").ValueAsString()}},
            {0x00000075, std::wstring{rm.MainResourceMap().GetValue(L"Resources/CANNOT_WRITE_CONFIGURATION").ValueAsString()}},
            {0x00000076, std::wstring{rm.MainResourceMap().GetValue(L"Resources/PROCESS_HAS_LOCKED_PAGES").ValueAsString()}},
            {0x00000077, std::wstring{rm.MainResourceMap().GetValue(L"Resources/KERNEL_STACK_INPAGE_ERROR").ValueAsString()}},
            {0x00000078, std::wstring{rm.MainResourceMap().GetValue(L"Resources/PHASE0_EXCEPTION").ValueAsString()}},
            {0x00000079, std::wstring{rm.MainResourceMap().GetValue(L"Resources/MISMATCHED_HAL").ValueAsString()}},
            {0x0000007A, std::wstring{rm.MainResourceMap().GetValue(L"Resources/KERNEL_DATA_INPAGE_ERROR").ValueAsString()}},
            {0x0000007B, std::wstring{rm.MainResourceMap().GetValue(L"Resources/INACCESSIBLE_BOOT_DEVICE").ValueAsString()}},
            {0x0000007C, std::wstring{rm.MainResourceMap().GetValue(L"Resources/BUGCODE_NDIS_DRIVER").ValueAsString()}},
            {0x0000007D, std::wstring{rm.MainResourceMap().GetValue(L"Resources/INSTALL_MORE_MEMORY").ValueAsString()}},
            {0x0000007E, std::wstring{rm.MainResourceMap().GetValue(L"Resources/SYSTEM_THREAD_EXCEPTION_NOT_HANDLED").ValueAsString()}},
            {0x0000007F, std::wstring{rm.MainResourceMap().GetValue(L"Resources/UNEXPECTED_KERNEL_MODE_TRAP").ValueAsString()}},
            {0x00000080, std::wstring{rm.MainResourceMap().GetValue(L"Resources/NMI_HARDWARE_FAILURE").ValueAsString()}},
            {0x00000081, std::wstring{rm.MainResourceMap().GetValue(L"Resources/SPIN_LOCK_INIT_FAILURE").ValueAsString()}},
            {0x00000082, std::wstring{rm.MainResourceMap().GetValue(L"Resources/DFS_FILE_SYSTEM").ValueAsString()}},
            {0x00000085, std::wstring{rm.MainResourceMap().GetValue(L"Resources/SETUP_FAILURE").ValueAsString()}},
            {0x0000008B, std::wstring{rm.MainResourceMap().GetValue(L"Resources/MBR_CHECKSUM_MISMATCH").ValueAsString()}},
            {0x0000008E, std::wstring{rm.MainResourceMap().GetValue(L"Resources/KERNEL_MODE_EXCEPTION_NOT_HANDLED").ValueAsString()}},
            {0x0000008F, std::wstring{rm.MainResourceMap().GetValue(L"Resources/PP0_INITIALIZATION_FAILED").ValueAsString()}},
            {0x00000090, std::wstring{rm.MainResourceMap().GetValue(L"Resources/PP1_INITIALIZATION_FAILED").ValueAsString()}},
            {0x00000092, std::wstring{rm.MainResourceMap().GetValue(L"Resources/UP_DRIVER_ON_MP_SYSTEM").ValueAsString()}},
            {0x00000093, std::wstring{rm.MainResourceMap().GetValue(L"Resources/INVALID_KERNEL_HANDLE").ValueAsString()}},
            {0x00000094, std::wstring{rm.MainResourceMap().GetValue(L"Resources/KERNEL_STACK_LOCKED_AT_EXIT").ValueAsString()}},
            {0x00000096, std::wstring{rm.MainResourceMap().GetValue(L"Resources/INVALID_WORK_QUEUE_ITEM").ValueAsString()}},
            {0x00000097, std::wstring{rm.MainResourceMap().GetValue(L"Resources/BOUND_IMAGE_UNSUPPORTED").ValueAsString()}},
            {0x00000098, std::wstring{rm.MainResourceMap().GetValue(L"Resources/END_OF_NT_EVALUATION_PERIOD").ValueAsString()}},
            {0x00000099, std::wstring{rm.MainResourceMap().GetValue(L"Resources/INVALID_REGION_OR_SEGMENT").ValueAsString()}},
            {0x0000009A, std::wstring{rm.MainResourceMap().GetValue(L"Resources/SYSTEM_LICENSE_VIOLATION").ValueAsString()}},
            {0x0000009B, std::wstring{rm.MainResourceMap().GetValue(L"Resources/UDFS_FILE_SYSTEM").ValueAsString()}},
            {0x0000009C, std::wstring{rm.MainResourceMap().GetValue(L"Resources/MACHINE_CHECK_EXCEPTION").ValueAsString()}},
            {0x0000009E, std::wstring{rm.MainResourceMap().GetValue(L"Resources/USER_MODE_HEALTH_MONITOR").ValueAsString()}},
            {0x0000009F, std::wstring{rm.MainResourceMap().GetValue(L"Resources/DRIVER_POWER_STATE_FAILURE").ValueAsString()}},
            {0x000000A0, std::wstring{rm.MainResourceMap().GetValue(L"Resources/INTERNAL_POWER_ERROR").ValueAsString()}},
            {0x000000A1, std::wstring{rm.MainResourceMap().GetValue(L"Resources/PCI_BUS_DRIVER_INTERNAL").ValueAsString()}},
            {0x000000A2, std::wstring{rm.MainResourceMap().GetValue(L"Resources/MEMORY_IMAGE_CORRUPT").ValueAsString()}},
            {0x000000A3, std::wstring{rm.MainResourceMap().GetValue(L"Resources/ACPI_DRIVER_INTERNAL").ValueAsString()}},
            {0x000000A4, std::wstring{rm.MainResourceMap().GetValue(L"Resources/CNSS_FILE_SYSTEM_FILTER").ValueAsString()}},
            {0x000000A5, std::wstring{rm.MainResourceMap().GetValue(L"Resources/ACPI_BIOS_ERROR").ValueAsString()}},
            {0x000000A7, std::wstring{rm.MainResourceMap().GetValue(L"Resources/BAD_EXHANDLE").ValueAsString()}},
            {0x000000AB, std::wstring{rm.MainResourceMap().GetValue(L"Resources/SESSION_HAS_VALID_POOL_ON_EXIT").ValueAsString()}},
            {0x000000AC, std::wstring{rm.MainResourceMap().GetValue(L"Resources/HAL_MEMORY_ALLOCATION").ValueAsString()}},
            {0x000000AD, std::wstring{rm.MainResourceMap().GetValue(L"Resources/VIDEO_DRIVER_DEBUG_REPORT_REQUEST").ValueAsString()}},
            {0x000000B1, std::wstring{rm.MainResourceMap().GetValue(L"Resources/BGI_DETECTED_VIOLATION").ValueAsString()}},
            {0x000000B4, std::wstring{rm.MainResourceMap().GetValue(L"Resources/VIDEO_DRIVER_INIT_FAILURE").ValueAsString()}},
            {0x000000B8, std::wstring{rm.MainResourceMap().GetValue(L"Resources/ATTEMPTED_SWITCH_FROM_DPC").ValueAsString()}},
            {0x000000B9, std::wstring{rm.MainResourceMap().GetValue(L"Resources/CHIPSET_DETECTED_ERROR").ValueAsString()}},
            {0x000000BA, std::wstring{rm.MainResourceMap().GetValue(L"Resources/SESSION_HAS_VALID_VIEWS_ON_EXIT").ValueAsString()}},
            {0x000000BB, std::wstring{rm.MainResourceMap().GetValue(L"Resources/NETWORK_BOOT_INITIALIZATION_FAILED").ValueAsString()}},
            {0x000000BC, std::wstring{rm.MainResourceMap().GetValue(L"Resources/NETWORK_BOOT_DUPLICATE_ADDRESS").ValueAsString()}},
            {0x000000BD, std::wstring{rm.MainResourceMap().GetValue(L"Resources/INVALID_HIBERNATED_STATE").ValueAsString()}},
            {0x000000BE, std::wstring{rm.MainResourceMap().GetValue(L"Resources/ATTEMPTED_WRITE_TO_READONLY_MEMORY").ValueAsString()}},
            {0x000000BF, std::wstring{rm.MainResourceMap().GetValue(L"Resources/MUTEX_ALREADY_OWNED").ValueAsString()}},
            {0x000000C1, std::wstring{rm.MainResourceMap().GetValue(L"Resources/SPECIAL_POOL_DETECTED_MEMORY_CORRUPTION").ValueAsString()}},
            {0x000000C2, std::wstring{rm.MainResourceMap().GetValue(L"Resources/BAD_POOL_CALLER").ValueAsString()}},
            {0x000000C4, std::wstring{rm.MainResourceMap().GetValue(L"Resources/DRIVER_VERIFIER_DETECTED_VIOLATION").ValueAsString()}},
            {0x000000C5, std::wstring{rm.MainResourceMap().GetValue(L"Resources/DRIVER_CORRUPTED_EXPOOL").ValueAsString()}},
            {0x000000C6, std::wstring{rm.MainResourceMap().GetValue(L"Resources/DRIVER_CAUGHT_MODIFYING_FREED_POOL").ValueAsString()}},
            {0x000000C7, std::wstring{rm.MainResourceMap().GetValue(L"Resources/TIMER_OR_DPC_INVALID").ValueAsString()}},
            {0x000000C8, std::wstring{rm.MainResourceMap().GetValue(L"Resources/IRQL_UNEXPECTED_VALUE").ValueAsString()}},
            {0x000000C9, std::wstring{rm.MainResourceMap().GetValue(L"Resources/DRIVER_VERIFIER_IOMANAGER_VIOLATION").ValueAsString()}},
            {0x000000CA, std::wstring{rm.MainResourceMap().GetValue(L"Resources/PNP_DETECTED_FATAL_ERROR").ValueAsString()}},
            {0x000000CB, std::wstring{rm.MainResourceMap().GetValue(L"Resources/DRIVER_LEFT_LOCKED_PAGES_IN_PROCESS").ValueAsString()}},
            {0x000000CC, std::wstring{rm.MainResourceMap().GetValue(L"Resources/PAGE_FAULT_IN_FREED_SPECIAL_POOL").ValueAsString()}},
            {0x000000CD, std::wstring{rm.MainResourceMap().GetValue(L"Resources/PAGE_FAULT_BEYOND_END_OF_ALLOCATION").ValueAsString()}},
            {0x000000CE, std::wstring{rm.MainResourceMap().GetValue(L"Resources/DRIVER_UNLOADED_WITHOUT_CANCELLING_PENDING_OPERATIONS").ValueAsString()}},
            {0x000000CF, std::wstring{rm.MainResourceMap().GetValue(L"Resources/TERMINAL_SERVER_DRIVER_MADE_INCORRECT_MEMORY_REFERENCE").ValueAsString()}},
            {0x000000D0, std::wstring{rm.MainResourceMap().GetValue(L"Resources/DRIVER_CORRUPTED_MMPOOL").ValueAsString()}},
            {0x000000D1, std::wstring{rm.MainResourceMap().GetValue(L"Resources/DRIVER_IRQL_NOT_LESS_OR_EQUAL").ValueAsString()}},
            {0x000000D2, std::wstring{rm.MainResourceMap().GetValue(L"Resources/BUGCODE_ID_DRIVER").ValueAsString()}},
            {0x000000D3, std::wstring{rm.MainResourceMap().GetValue(L"Resources/DRIVER_PORTION_MUST_BE_NONPAGED").ValueAsString()}},
            {0x000000D4, std::wstring{rm.MainResourceMap().GetValue(L"Resources/SYSTEM_SCAN_AT_RAISED_IRQL_CAUGHT_IMPROPER_DRIVER_UNLOAD").ValueAsString()}},
            {0x000000D5, std::wstring{rm.MainResourceMap().GetValue(L"Resources/DRIVER_PAGE_FAULT_IN_FREED_SPECIAL_POOL").ValueAsString()}},
            {0x000000D6, std::wstring{rm.MainResourceMap().GetValue(L"Resources/DRIVER_PAGE_FAULT_BEYOND_END_OF_ALLOCATION").ValueAsString()}},
            {0x000000D7, std::wstring{rm.MainResourceMap().GetValue(L"Resources/DRIVER_UNMAPPING_INVALID_VIEW").ValueAsString()}},
            {0x000000D8, std::wstring{rm.MainResourceMap().GetValue(L"Resources/DRIVER_USED_EXCESSIVE_PTES").ValueAsString()}},
            {0x000000D9, std::wstring{rm.MainResourceMap().GetValue(L"Resources/LOCKED_PAGES_TRACKER_CORRUPTION").ValueAsString()}},
            {0x000000DA, std::wstring{rm.MainResourceMap().GetValue(L"Resources/SYSTEM_PTE_MISUSE").ValueAsString()}},
            {0x000000DB, std::wstring{rm.MainResourceMap().GetValue(L"Resources/DRIVER_CORRUPTED_SYSPTES").ValueAsString()}},
            {0x000000DC, std::wstring{rm.MainResourceMap().GetValue(L"Resources/DRIVER_INVALID_STACK_ACCESS").ValueAsString()}},
            {0x000000DE, std::wstring{rm.MainResourceMap().GetValue(L"Resources/POOL_CORRUPTION_IN_FILE_AREA").ValueAsString()}},
            {0x000000DF, std::wstring{rm.MainResourceMap().GetValue(L"Resources/IMPERSONATING_WORKER_THREAD").ValueAsString()}},
            {0x000000E0, std::wstring{rm.MainResourceMap().GetValue(L"Resources/ACPI_BIOS_FATAL_ERROR").ValueAsString()}},
            {0x000000E1, std::wstring{rm.MainResourceMap().GetValue(L"Resources/WORKER_THREAD_RETURNED_AT_BAD_IRQL").ValueAsString()}},
            {0x000000E2, std::wstring{rm.MainResourceMap().GetValue(L"Resources/MANUALLY_INITIATED_CRASH").ValueAsString()}},
            {0x000000E3, std::wstring{rm.MainResourceMap().GetValue(L"Resources/RESOURCE_NOT_OWNED").ValueAsString()}},
            {0x000000E4, std::wstring{rm.MainResourceMap().GetValue(L"Resources/WORKER_INVALID").ValueAsString()}},
            {0x000000E6, std::wstring{rm.MainResourceMap().GetValue(L"Resources/DRIVER_VERIFIER_DMA_VIOLATION").ValueAsString()}},
            {0x000000E7, std::wstring{rm.MainResourceMap().GetValue(L"Resources/INVALID_FLOATING_POINT_STATE").ValueAsString()}},
            {0x000000E8, std::wstring{rm.MainResourceMap().GetValue(L"Resources/INVALID_CANCEL_OF_FILE_OPEN").ValueAsString()}},
            {0x000000E9, std::wstring{rm.MainResourceMap().GetValue(L"Resources/ACTIVE_EX_WORKER_THREAD_TERMINATION").ValueAsString()}},
            {0x000000EA, std::wstring{rm.MainResourceMap().GetValue(L"Resources/THREAD_STUCK_IN_DEVICE_DRIVER").ValueAsString()}},
            {0x000000EB, std::wstring{rm.MainResourceMap().GetValue(L"Resources/DIRTY_MAPPED_PAGES_CONGESTION").ValueAsString()}},
            {0x000000EC, std::wstring{rm.MainResourceMap().GetValue(L"Resources/SESSION_HAS_VALID_SPECIAL_POOL_ON_EXIT").ValueAsString()}},
            {0x000000ED, std::wstring{rm.MainResourceMap().GetValue(L"Resources/UNMOUNTABLE_BOOT_VOLUME").ValueAsString()}},
            {0x000000EF, std::wstring{rm.MainResourceMap().GetValue(L"Resources/CRITICAL_PROCESS_DIED").ValueAsString()}},
            {0x000000F0, std::wstring{rm.MainResourceMap().GetValue(L"Resources/STORAGE_MINIPORT_ERROR").ValueAsString()}},
            {0x000000F1, std::wstring{rm.MainResourceMap().GetValue(L"Resources/SCSI_VERIFIER_DETECTED_VIOLATION").ValueAsString()}},
            {0x000000F2, std::wstring{rm.MainResourceMap().GetValue(L"Resources/HARDWARE_INTERRUPT_STORM").ValueAsString()}},
            {0x000000F3, std::wstring{rm.MainResourceMap().GetValue(L"Resources/DISORDERLY_SHUTDOWN").ValueAsString()}},
            {0x000000F4, std::wstring{rm.MainResourceMap().GetValue(L"Resources/CRITICAL_OBJECT_TERMINATION").ValueAsString()}},
            {0x000000F5, std::wstring{rm.MainResourceMap().GetValue(L"Resources/FLTMGR_FILE_SYSTEM").ValueAsString()}},
            {0x000000F6, std::wstring{rm.MainResourceMap().GetValue(L"Resources/PCI_VERIFIER_DETECTED_VIOLATION").ValueAsString()}},
            {0x000000F7, std::wstring{rm.MainResourceMap().GetValue(L"Resources/DRIVER_OVERRAN_STACK_BUFFER").ValueAsString()}},
            {0x000000F8, std::wstring{rm.MainResourceMap().GetValue(L"Resources/RAMDISK_BOOT_INITIALIZATION_FAILED").ValueAsString()}},
            {0x000000F9, std::wstring{rm.MainResourceMap().GetValue(L"Resources/DRIVER_RETURNED_STATUS_REPARSE_FOR_VOLUME_OPEN").ValueAsString()}},
            {0x000000FA, std::wstring{rm.MainResourceMap().GetValue(L"Resources/HTTP_DRIVER_CORRUPTED").ValueAsString()}},
            {0x000000FC, std::wstring{rm.MainResourceMap().GetValue(L"Resources/ATTEMPTED_EXECUTE_OF_NOEXECUTE_MEMORY").ValueAsString()}},
            {0x000000FD, std::wstring{rm.MainResourceMap().GetValue(L"Resources/DIRTY_NOWRITE_PAGES_CONGESTION").ValueAsString()}},
            {0x000000FE, std::wstring{rm.MainResourceMap().GetValue(L"Resources/BUGCODE_USB_DRIVER").ValueAsString()}},
            {0x000000FF, std::wstring{rm.MainResourceMap().GetValue(L"Resources/RESERVE_QUEUE_OVERFLOW").ValueAsString()}},
            {0x00000100, std::wstring{rm.MainResourceMap().GetValue(L"Resources/LOADER_BLOCK_MISMATCH").ValueAsString()}},
            {0x00000101, std::wstring{rm.MainResourceMap().GetValue(L"Resources/CLOCK_WATCHDOG_TIMEOUT").ValueAsString()}},
            {0x00000102, std::wstring{rm.MainResourceMap().GetValue(L"Resources/DPC_WATCHDOG_TIMEOUT").ValueAsString()}},
            {0x00000103, std::wstring{rm.MainResourceMap().GetValue(L"Resources/MUP_FILE_SYSTEM").ValueAsString()}},
            {0x00000104, std::wstring{rm.MainResourceMap().GetValue(L"Resources/AGP_INVALID_ACCESS").ValueAsString()}},
            {0x00000105, std::wstring{rm.MainResourceMap().GetValue(L"Resources/AGP_GART_CORRUPTION").ValueAsString()}},
            {0x00000106, std::wstring{rm.MainResourceMap().GetValue(L"Resources/AGP_ILLEGALLY_REPROGRAMMED").ValueAsString()}},
            {0x00000108, std::wstring{rm.MainResourceMap().GetValue(L"Resources/THIRD_PARTY_FILE_SYSTEM_FAILURE").ValueAsString()}},
            {0x00000109, std::wstring{rm.MainResourceMap().GetValue(L"Resources/CRITICAL_STRUCTURE_CORRUPTION").ValueAsString()}},
            {0x0000010A, std::wstring{rm.MainResourceMap().GetValue(L"Resources/APP_TAGGING_INITIALIZATION_FAILED").ValueAsString()}},
            {0x0000010C, std::wstring{rm.MainResourceMap().GetValue(L"Resources/FSRTL_EXTRA_CREATE_PARAMETER_VIOLATION").ValueAsString()}},
            {0x0000010D, std::wstring{rm.MainResourceMap().GetValue(L"Resources/WDF_VIOLATION").ValueAsString()}},
            {0x0000010E, std::wstring{rm.MainResourceMap().GetValue(L"Resources/VIDEO_MEMORY_MANAGEMENT_INTERNAL").ValueAsString()}},
            {0x0000010F, std::wstring{rm.MainResourceMap().GetValue(L"Resources/RESOURCE_MANAGER_EXCEPTION_NOT_HANDLED").ValueAsString()}},
            {0x00000111, std::wstring{rm.MainResourceMap().GetValue(L"Resources/RECURSIVE_NMI").ValueAsString()}},
            {0x00000112, std::wstring{rm.MainResourceMap().GetValue(L"Resources/MSRPC_STATE_VIOLATION").ValueAsString()}},
            {0x00000113, std::wstring{rm.MainResourceMap().GetValue(L"Resources/VIDEO_DXGKRNL_FATAL_ERROR").ValueAsString()}},
            {0x00000114, std::wstring{rm.MainResourceMap().GetValue(L"Resources/VIDEO_SHADOW_DRIVER_FATAL_ERROR").ValueAsString()}},
            {0x00000115, std::wstring{rm.MainResourceMap().GetValue(L"Resources/AGP_INTERNAL").ValueAsString()}},
            {0x00000116, std::wstring{rm.MainResourceMap().GetValue(L"Resources/VIDEO_TDR_FAILURE").ValueAsString()}},
            {0x00000117, std::wstring{rm.MainResourceMap().GetValue(L"Resources/VIDEO_TDR_TIMEOUT_DETECTED").ValueAsString()}},
            {0x00000119, std::wstring{rm.MainResourceMap().GetValue(L"Resources/VIDEO_SCHEDULER_INTERNAL_ERROR").ValueAsString()}},
            {0x0000011A, std::wstring{rm.MainResourceMap().GetValue(L"Resources/EM_INITIALIZATION_FAILURE").ValueAsString()}},
            {0x0000011B, std::wstring{rm.MainResourceMap().GetValue(L"Resources/DRIVER_RETURNED_HOLDING_CANCEL_LOCK").ValueAsString()}},
            {0x0000011C, std::wstring{rm.MainResourceMap().GetValue(L"Resources/ATTEMPTED_WRITE_TO_CM_PROTECTED_STORAGE").ValueAsString()}},
            {0x0000011D, std::wstring{rm.MainResourceMap().GetValue(L"Resources/EVENT_TRACING_FATAL_ERROR").ValueAsString()}},
            {0x0000011E, std::wstring{rm.MainResourceMap().GetValue(L"Resources/TOO_MANY_RECURSIVE_FAULTS").ValueAsString()}},
            {0x0000011F, std::wstring{rm.MainResourceMap().GetValue(L"Resources/INVALID_DRIVER_HANDLE").ValueAsString()}},
            {0x00000120, std::wstring{rm.MainResourceMap().GetValue(L"Resources/BITLOCKER_FATAL_ERROR").ValueAsString()}},
            {0x00000121, std::wstring{rm.MainResourceMap().GetValue(L"Resources/DRIVER_VIOLATION").ValueAsString()}},
            {0x00000122, std::wstring{rm.MainResourceMap().GetValue(L"Resources/WHEA_INTERNAL_ERROR").ValueAsString()}},
            {0x00000123, std::wstring{rm.MainResourceMap().GetValue(L"Resources/CRYPTO_SELF_TEST_FAILURE").ValueAsString()}},
            {0x00000124, std::wstring{rm.MainResourceMap().GetValue(L"Resources/WHEA_UNCORRECTABLE_ERROR").ValueAsString()}},
            {0x00000125, std::wstring{rm.MainResourceMap().GetValue(L"Resources/NMR_INVALID_STATE").ValueAsString()}},
            {0x00000126, std::wstring{rm.MainResourceMap().GetValue(L"Resources/NETIO_INVALID_POOL_CALLER").ValueAsString()}},
            {0x00000127, std::wstring{rm.MainResourceMap().GetValue(L"Resources/PAGE_NOT_ZERO").ValueAsString()}},
            {0x00000128, std::wstring{rm.MainResourceMap().GetValue(L"Resources/WORKER_THREAD_RETURNED_WITH_BAD_IO_PRIORITY").ValueAsString()}},
            {0x00000129, std::wstring{rm.MainResourceMap().GetValue(L"Resources/WORKER_THREAD_RETURNED_WITH_BAD_PAGING_IO_PRIORITY").ValueAsString()}},
            {0x0000012A, std::wstring{rm.MainResourceMap().GetValue(L"Resources/MUI_NO_VALID_SYSTEM_LANGUAGE").ValueAsString()}},
            {0x0000012B, std::wstring{rm.MainResourceMap().GetValue(L"Resources/FAULTY_HARDWARE_CORRUPTED_PAGE").ValueAsString()}},
            {0x0000012C, std::wstring{rm.MainResourceMap().GetValue(L"Resources/EXFAT_FILE_SYSTEM").ValueAsString()}},
            {0x0000012D, std::wstring{rm.MainResourceMap().GetValue(L"Resources/VOLSNAP_OVERLAPPED_TABLE_ACCESS").ValueAsString()}},
            {0x0000012E, std::wstring{rm.MainResourceMap().GetValue(L"Resources/INVALID_MDL_RANGE").ValueAsString()}},
            {0x0000012F, std::wstring{rm.MainResourceMap().GetValue(L"Resources/VHD_BOOT_INITIALIZATION_FAILED").ValueAsString()}},
            {0x00000130, std::wstring{rm.MainResourceMap().GetValue(L"Resources/DYNAMIC_ADD_PROCESSOR_MISMATCH").ValueAsString()}},
            {0x00000131, std::wstring{rm.MainResourceMap().GetValue(L"Resources/INVALID_EXTENDED_PROCESSOR_STATE").ValueAsString()}},
            {0x00000132, std::wstring{rm.MainResourceMap().GetValue(L"Resources/RESOURCE_OWNER_POINTER_INVALID").ValueAsString()}},
            {0x00000133, std::wstring{rm.MainResourceMap().GetValue(L"Resources/DPC_WATCHDOG_VIOLATION").ValueAsString()}},
            {0x00000134, std::wstring{rm.MainResourceMap().GetValue(L"Resources/DRIVE_EXTENDER").ValueAsString()}},
            {0x00000135, std::wstring{rm.MainResourceMap().GetValue(L"Resources/REGISTRY_FILTER_DRIVER_EXCEPTION").ValueAsString()}},
            {0x00000136, std::wstring{rm.MainResourceMap().GetValue(L"Resources/VHD_BOOT_HOST_VOLUME_NOT_ENOUGH_SPACE").ValueAsString()}},
            {0x00000137, std::wstring{rm.MainResourceMap().GetValue(L"Resources/WIN32K_HANDLE_MANAGER").ValueAsString()}},
            {0x00000138, std::wstring{rm.MainResourceMap().GetValue(L"Resources/GPIO_CONTROLLER_DRIVER_ERROR").ValueAsString()}},
            {0x00000139, std::wstring{rm.MainResourceMap().GetValue(L"Resources/KERNEL_SECURITY_CHECK_FAILURE").ValueAsString()}},
            {0x0000013A, std::wstring{rm.MainResourceMap().GetValue(L"Resources/KERNEL_MODE_HEAP_CORRUPTION").ValueAsString()}},
            {0x0000013B, std::wstring{rm.MainResourceMap().GetValue(L"Resources/PASSIVE_INTERRUPT_ERROR").ValueAsString()}},
            {0x0000013C, std::wstring{rm.MainResourceMap().GetValue(L"Resources/INVALID_IO_BOOST_STATE").ValueAsString()}},
            {0x0000013D, std::wstring{rm.MainResourceMap().GetValue(L"Resources/CRITICAL_INITIALIZATION_FAILURE").ValueAsString()}},
            {0x00000140, std::wstring{rm.MainResourceMap().GetValue(L"Resources/STORAGE_DEVICE_ABNORMALITY_DETECTED").ValueAsString()}},
            {0x00000141, std::wstring{rm.MainResourceMap().GetValue(L"Resources/VIDEO_ENGINE_TIMEOUT_DETECTED").ValueAsString()}},
            {0x00000142, std::wstring{rm.MainResourceMap().GetValue(L"Resources/VIDEO_TDR_APPLICATION_BLOCKED").ValueAsString()}},
            {0x00000143, std::wstring{rm.MainResourceMap().GetValue(L"Resources/PROCESSOR_DRIVER_INTERNAL").ValueAsString()}},
            {0x00000144, std::wstring{rm.MainResourceMap().GetValue(L"Resources/BUGCODE_USB3_DRIVER").ValueAsString()}},
            {0x00000145, std::wstring{rm.MainResourceMap().GetValue(L"Resources/SECURE_BOOT_VIOLATION").ValueAsString()}},
            {0x00000147, std::wstring{rm.MainResourceMap().GetValue(L"Resources/ABNORMAL_RESET_DETECTED").ValueAsString()}},
            {0x00000149, std::wstring{rm.MainResourceMap().GetValue(L"Resources/REFS_FILE_SYSTEM").ValueAsString()}},
            {0x0000014A, std::wstring{rm.MainResourceMap().GetValue(L"Resources/KERNEL_WMI_INTERNAL").ValueAsString()}},
            {0x0000014B, std::wstring{rm.MainResourceMap().GetValue(L"Resources/SOC_SUBSYSTEM_FAILURE").ValueAsString()}},
            {0x0000014C, std::wstring{rm.MainResourceMap().GetValue(L"Resources/FATAL_ABNORMAL_RESET_ERROR").ValueAsString()}},
            {0x0000014D, std::wstring{rm.MainResourceMap().GetValue(L"Resources/EXCEPTION_SCOPE_INVALID").ValueAsString()}},
            {0x0000014E, std::wstring{rm.MainResourceMap().GetValue(L"Resources/SOC_CRITICAL_DEVICE_REMOVED").ValueAsString()}},
            {0x0000014F, std::wstring{rm.MainResourceMap().GetValue(L"Resources/PDC_WATCHDOG_TIMEOUT").ValueAsString()}},
            {0x00000150, std::wstring{rm.MainResourceMap().GetValue(L"Resources/TCPIP_AOAC_NIC_ACTIVE_REFERENCE_LEAK").ValueAsString()}},
            {0x00000151, std::wstring{rm.MainResourceMap().GetValue(L"Resources/UNSUPPORTED_INSTRUCTION_MODE").ValueAsString()}},
            {0x00000152, std::wstring{rm.MainResourceMap().GetValue(L"Resources/INVALID_PUSH_LOCK_FLAGS").ValueAsString()}},
            {0x00000153, std::wstring{rm.MainResourceMap().GetValue(L"Resources/KERNEL_LOCK_ENTRY_LEAKED_ON_THREAD_TERMINATION").ValueAsString()}},
            {0x00000154, std::wstring{rm.MainResourceMap().GetValue(L"Resources/UNEXPECTED_STORE_EXCEPTION").ValueAsString()}},
            {0x00000155, std::wstring{rm.MainResourceMap().GetValue(L"Resources/OS_DATA_TAMPERING").ValueAsString()}},
            {0x00000156, std::wstring{rm.MainResourceMap().GetValue(L"Resources/WINSOCK_DETECTED_HUNG_CLOSESOCKET_LIVEDUMP").ValueAsString()}},
            {0x00000157, std::wstring{rm.MainResourceMap().GetValue(L"Resources/KERNEL_THREAD_PRIORITY_FLOOR_VIOLATION").ValueAsString()}},
            {0x00000158, std::wstring{rm.MainResourceMap().GetValue(L"Resources/ILLEGAL_IOMMU_PAGE_FAULT").ValueAsString()}},
            {0x00000159, std::wstring{rm.MainResourceMap().GetValue(L"Resources/HAL_ILLEGAL_IOMMU_PAGE_FAULT").ValueAsString()}},
            {0x0000015A, std::wstring{rm.MainResourceMap().GetValue(L"Resources/SDBUS_INTERNAL_ERROR").ValueAsString()}},
            {0x0000015B, std::wstring{rm.MainResourceMap().GetValue(L"Resources/WORKER_THREAD_RETURNED_WITH_SYSTEM_PAGE_PRIORITY_ACTIVE").ValueAsString()}},
            {0x0000015C, std::wstring{rm.MainResourceMap().GetValue(L"Resources/PDC_WATCHDOG_TIMEOUT_LIVEDUMP").ValueAsString()}},
            {0x0000015D, std::wstring{rm.MainResourceMap().GetValue(L"Resources/SOC_SUBSYSTEM_FAILURE_LIVEDUMP").ValueAsString()}},
            {0x0000015E, std::wstring{rm.MainResourceMap().GetValue(L"Resources/BUGCODE_NDIS_DRIVER_LIVE_DUMP").ValueAsString()}},
            {0x0000015F, std::wstring{rm.MainResourceMap().GetValue(L"Resources/CONNECTED_STANDBY_WATCHDOG_TIMEOUT_LIVEDUMP").ValueAsString()}},
            {0x00000160, std::wstring{rm.MainResourceMap().GetValue(L"Resources/WIN32K_ATOMIC_CHECK_FAILURE").ValueAsString()}},
            {0x00000161, std::wstring{rm.MainResourceMap().GetValue(L"Resources/LIVE_SYSTEM_DUMP").ValueAsString()}},
            {0x00000162, std::wstring{rm.MainResourceMap().GetValue(L"Resources/KERNEL_AUTO_BOOST_INVALID_LOCK_RELEASE").ValueAsString()}},
            {0x00000163, std::wstring{rm.MainResourceMap().GetValue(L"Resources/WORKER_THREAD_TEST_CONDITION").ValueAsString()}},
            {0x00000164, std::wstring{rm.MainResourceMap().GetValue(L"Resources/WIN32K_CRITICAL_FAILURE").ValueAsString()}},
            {0x00000165, std::wstring{rm.MainResourceMap().GetValue(L"Resources/CLUSTER_CSV_STATUS_IO_TIMEOUT_LIVEDUMP").ValueAsString()}},
            {0x00000166, std::wstring{rm.MainResourceMap().GetValue(L"Resources/CLUSTER_RESOURCE_CALL_TIMEOUT_LIVEDUMP").ValueAsString()}},
            {0x00000167, std::wstring{rm.MainResourceMap().GetValue(L"Resources/CLUSTER_CSV_SNAPSHOT_DEVICE_INFO_TIMEOUT_LIVEDUMP").ValueAsString()}},
            {0x00000168, std::wstring{rm.MainResourceMap().GetValue(L"Resources/CLUSTER_CSV_STATE_TRANSITION_TIMEOUT_LIVEDUMP").ValueAsString()}},
            {0x00000169, std::wstring{rm.MainResourceMap().GetValue(L"Resources/CLUSTER_CSV_VOLUME_ARRIVAL_LIVEDUMP").ValueAsString()}},
            {0x0000016A, std::wstring{rm.MainResourceMap().GetValue(L"Resources/CLUSTER_CSV_VOLUME_REMOVAL_LIVEDUMP").ValueAsString()}},
            {0x0000016B, std::wstring{rm.MainResourceMap().GetValue(L"Resources/CLUSTER_CSV_CLUSTER_WATCHDOG_LIVEDUMP").ValueAsString()}},
            {0x0000016C, std::wstring{rm.MainResourceMap().GetValue(L"Resources/INVALID_RUNDOWN_PROTECTION_FLAGS").ValueAsString()}},
            {0x0000016D, std::wstring{rm.MainResourceMap().GetValue(L"Resources/INVALID_SLOT_ALLOCATOR_FLAGS").ValueAsString()}},
            {0x0000016E, std::wstring{rm.MainResourceMap().GetValue(L"Resources/ERESOURCE_INVALID_RELEASE").ValueAsString()}},
            {0x0000016F, std::wstring{rm.MainResourceMap().GetValue(L"Resources/CLUSTER_CSV_STATE_TRANSITION_INTERVAL_TIMEOUT_LIVEDUMP").ValueAsString()}},
            {0x00000170, std::wstring{rm.MainResourceMap().GetValue(L"Resources/CRYPTO_LIBRARY_INTERNAL_ERROR").ValueAsString()}},
            {0x00000171, std::wstring{rm.MainResourceMap().GetValue(L"Resources/CLUSTER_CSV_CLUSSVC_DISCONNECT_WATCHDOG").ValueAsString()}},
            {0x00000173, std::wstring{rm.MainResourceMap().GetValue(L"Resources/COREMSGCALL_INTERNAL_ERROR").ValueAsString()}},
            {0x00000174, std::wstring{rm.MainResourceMap().GetValue(L"Resources/COREMSG_INTERNAL_ERROR").ValueAsString()}},
            {0x00000175, std::wstring{rm.MainResourceMap().GetValue(L"Resources/PREVIOUS_FATAL_ABNORMAL_RESET_ERROR").ValueAsString()}},
            {0x00000178, std::wstring{rm.MainResourceMap().GetValue(L"Resources/ELAM_DRIVER_DETECTED_FATAL_ERROR").ValueAsString()}},
            {0x00000179, std::wstring{rm.MainResourceMap().GetValue(L"Resources/CLUSTER_CLUSPORT_STATUS_IO_TIMEOUT_LIVEDUMP").ValueAsString()}},
            {0x0000017B, std::wstring{rm.MainResourceMap().GetValue(L"Resources/PROFILER_CONFIGURATION_ILLEGAL").ValueAsString()}},
            {0x0000017C, std::wstring{rm.MainResourceMap().GetValue(L"Resources/PDC_LOCK_WATCHDOG_LIVEDUMP").ValueAsString()}},
            {0x0000017D, std::wstring{rm.MainResourceMap().GetValue(L"Resources/PDC_UNEXPECTED_REVOCATION_LIVEDUMP").ValueAsString()}},
            {0x0000017E, std::wstring{rm.MainResourceMap().GetValue(L"Resources/MICROCODE_REVISION_MISMATCH").ValueAsString()}},
            {0x00000187, std::wstring{rm.MainResourceMap().GetValue(L"Resources/VIDEO_DWMINIT_TIMEOUT_FALLBACK_BDD").ValueAsString()}},
            {0x00000188, std::wstring{rm.MainResourceMap().GetValue(L"Resources/CLUSTER_CSVFS_LIVEDUMP").ValueAsString()}},
            {0x00000189, std::wstring{rm.MainResourceMap().GetValue(L"Resources/BAD_OBJECT_HEADER").ValueAsString()}},
            {0x0000018B, std::wstring{rm.MainResourceMap().GetValue(L"Resources/SECURE_KERNEL_ERROR").ValueAsString()}},
            {0x0000018C, std::wstring{rm.MainResourceMap().GetValue(L"Resources/HYPERGUARD_VIOLATION").ValueAsString()}},
            {0x0000018D, std::wstring{rm.MainResourceMap().GetValue(L"Resources/SECURE_FAULT_UNHANDLED").ValueAsString()}},
            {0x0000018E, std::wstring{rm.MainResourceMap().GetValue(L"Resources/KERNEL_PARTITION_REFERENCE_VIOLATION").ValueAsString()}},
            {0x00000190, std::wstring{rm.MainResourceMap().GetValue(L"Resources/WIN32K_CRITICAL_FAILURE_LIVEDUMP").ValueAsString()}},
            {0x00000191, std::wstring{rm.MainResourceMap().GetValue(L"Resources/PF_DETECTED_CORRUPTION").ValueAsString()}},
            {0x00000192, std::wstring{rm.MainResourceMap().GetValue(L"Resources/KERNEL_AUTO_BOOST_LOCK_ACQUISITION_WITH_RAISED_IRQL").ValueAsString()}},
            {0x00000193, std::wstring{rm.MainResourceMap().GetValue(L"Resources/VIDEO_DXGKRNL_LIVEDUMP").ValueAsString()}},
            {0x00000195, std::wstring{rm.MainResourceMap().GetValue(L"Resources/SMB_SERVER_LIVEDUMP").ValueAsString()}},
            {0x00000196, std::wstring{rm.MainResourceMap().GetValue(L"Resources/LOADER_ROLLBACK_DETECTED").ValueAsString()}},
            {0x00000197, std::wstring{rm.MainResourceMap().GetValue(L"Resources/WIN32K_SECURITY_FAILURE").ValueAsString()}},
            {0x00000198, std::wstring{rm.MainResourceMap().GetValue(L"Resources/UFX_LIVEDUMP").ValueAsString()}},
            {0x00000199, std::wstring{rm.MainResourceMap().GetValue(L"Resources/KERNEL_STORAGE_SLOT_IN_USE").ValueAsString()}},
            {0x0000019A, std::wstring{rm.MainResourceMap().GetValue(L"Resources/WORKER_THREAD_RETURNED_WHILE_ATTACHED_TO_SILO").ValueAsString()}},
            {0x0000019B, std::wstring{rm.MainResourceMap().GetValue(L"Resources/TTM_FATAL_ERROR").ValueAsString()}},
            {0x0000019C, std::wstring{rm.MainResourceMap().GetValue(L"Resources/WIN32K_POWER_WATCHDOG_TIMEOUT").ValueAsString()}},
            {0x0000019D, std::wstring{rm.MainResourceMap().GetValue(L"Resources/CLUSTER_SVHDX_LIVEDUMP").ValueAsString()}},
            {0x000001A0, std::wstring{rm.MainResourceMap().GetValue(L"Resources/TTM_WATCHDOG_TIMEOUT").ValueAsString()}},
            {0x000001A1, std::wstring{rm.MainResourceMap().GetValue(L"Resources/WIN32K_CALLOUT_WATCHDOG_LIVEDUMP").ValueAsString()}},
            {0x000001A2, std::wstring{rm.MainResourceMap().GetValue(L"Resources/WIN32K_CALLOUT_WATCHDOG_BUGCHECK").ValueAsString()}},
            {0x000001A3, std::wstring{rm.MainResourceMap().GetValue(L"Resources/CALL_HAS_NOT_RETURNED_WATCHDOG_TIMEOUT_LIVEDUMP").ValueAsString()}},
            {0x000001A4, std::wstring{rm.MainResourceMap().GetValue(L"Resources/DRIPS_SW_HW_DIVERGENCE_LIVEDUMP").ValueAsString()}},
            {0x000001A5, std::wstring{rm.MainResourceMap().GetValue(L"Resources/USB_DRIPS_BLOCKER_SURPRISE_REMOVAL_LIVEDUMP").ValueAsString()}},
            {0x000001A6, std::wstring{rm.MainResourceMap().GetValue(L"Resources/BLUETOOTH_ERROR_RECOVERY_LIVEDUMP").ValueAsString()}},
            {0x000001A7, std::wstring{rm.MainResourceMap().GetValue(L"Resources/SMB_REDIRECTOR_LIVEDUMP").ValueAsString()}},
            {0x000001A8, std::wstring{rm.MainResourceMap().GetValue(L"Resources/VIDEO_DXGKRNL_BLACK_SCREEN_LIVEDUMP").ValueAsString()}},
            {0x000001B0, std::wstring{rm.MainResourceMap().GetValue(L"Resources/VIDEO_MINIPORT_FAILED_LIVEDUMP").ValueAsString()}},
            {0x000001B8, std::wstring{rm.MainResourceMap().GetValue(L"Resources/VIDEO_MINIPORT_BLACK_SCREEN_LIVEDUMP").ValueAsString()}},
            {0x000001C4, std::wstring{rm.MainResourceMap().GetValue(L"Resources/DRIVER_VERIFIER_DETECTED_VIOLATION_LIVEDUMP").ValueAsString()}},
            {0x000001C5, std::wstring{rm.MainResourceMap().GetValue(L"Resources/IO_THREADPOOL_DEADLOCK_LIVEDUMP").ValueAsString()}},
            {0x000001C6, std::wstring{rm.MainResourceMap().GetValue(L"Resources/FAST_ERESOURCE_PRECONDITION_VIOLATION").ValueAsString()}},
            {0x000001C7, std::wstring{rm.MainResourceMap().GetValue(L"Resources/STORE_DATA_STRUCTURE_CORRUPTION").ValueAsString()}},
            {0x000001C8, std::wstring{rm.MainResourceMap().GetValue(L"Resources/MANUALLY_INITIATED_POWER_BUTTON_HOLD").ValueAsString()}},
            {0x000001C9, std::wstring{rm.MainResourceMap().GetValue(L"Resources/USER_MODE_HEALTH_MONITOR_LIVEDUMP").ValueAsString()}},
            {0x000001CA, std::wstring{rm.MainResourceMap().GetValue(L"Resources/SYNTHETIC_WATCHDOG_TIMEOUT").ValueAsString()}},
            {0x000001CB, std::wstring{rm.MainResourceMap().GetValue(L"Resources/INVALID_SILO_DETACH").ValueAsString()}},
            {0x000001CC, std::wstring{rm.MainResourceMap().GetValue(L"Resources/EXRESOURCE_TIMEOUT_LIVEDUMP").ValueAsString()}},
            {0x000001CD, std::wstring{rm.MainResourceMap().GetValue(L"Resources/INVALID_CALLBACK_STACK_ADDRESS").ValueAsString()}},
            {0x000001CE, std::wstring{rm.MainResourceMap().GetValue(L"Resources/INVALID_KERNEL_STACK_ADDRESS").ValueAsString()}},
            {0x000001CF, std::wstring{rm.MainResourceMap().GetValue(L"Resources/HARDWARE_WATCHDOG_TIMEOUT").ValueAsString()}},
            {0x000001D0, std::wstring{rm.MainResourceMap().GetValue(L"Resources/CPI_FIRMWARE_WATCHDOG_TIMEOUT").ValueAsString()}},
            {0x000001D1, std::wstring{rm.MainResourceMap().GetValue(L"Resources/TELEMETRY_ASSERTS_LIVEDUMP").ValueAsString()}},
            {0x000001D2, std::wstring{rm.MainResourceMap().GetValue(L"Resources/WORKER_THREAD_INVALID_STATE").ValueAsString()}},
            {0x000001D3, std::wstring{rm.MainResourceMap().GetValue(L"Resources/WFP_INVALID_OPERATION").ValueAsString()}},
            {0x000001D4, std::wstring{rm.MainResourceMap().GetValue(L"Resources/UCMUCSI_LIVEDUMP").ValueAsString()}},
            {0x000001D5, std::wstring{rm.MainResourceMap().GetValue(L"Resources/DRIVER_PNP_WATCHDOG").ValueAsString()}},
            {0x000001D6, std::wstring{rm.MainResourceMap().GetValue(L"Resources/WORKER_THREAD_RETURNED_WITH_NON_DEFAULT_WORKLOAD_CLASS").ValueAsString()}},
            {0x000001D7, std::wstring{rm.MainResourceMap().GetValue(L"Resources/EFS_FATAL_ERROR").ValueAsString()}},
            {0x000001D8, std::wstring{rm.MainResourceMap().GetValue(L"Resources/UCMUCSI_FAILURE").ValueAsString()}},
            {0x000001D9, std::wstring{rm.MainResourceMap().GetValue(L"Resources/HAL_IOMMU_INTERNAL_ERROR").ValueAsString()}},
            {0x000001DA, std::wstring{rm.MainResourceMap().GetValue(L"Resources/HAL_BLOCKED_PROCESSOR_INTERNAL_ERROR").ValueAsString()}},
            {0x000001DB, std::wstring{rm.MainResourceMap().GetValue(L"Resources/IPI_WATCHDOG_TIMEOUT").ValueAsString()}},
            {0x000001DC, std::wstring{rm.MainResourceMap().GetValue(L"Resources/DMA_COMMON_BUFFER_VECTOR_ERROR").ValueAsString()}},
            {0x00000356, std::wstring{rm.MainResourceMap().GetValue(L"Resources/XBOX_ERACTRL_CS_TIMEOUT").ValueAsString()}},
            {0x00000BFE, std::wstring{rm.MainResourceMap().GetValue(L"Resources/BC_BLUETOOTH_VERIFIER_FAULT").ValueAsString()}},
            {0x00000BFF, std::wstring{rm.MainResourceMap().GetValue(L"Resources/BC_BTHMINI_VERIFIER_FAULT").ValueAsString()}},
            {0x00020001, std::wstring{rm.MainResourceMap().GetValue(L"Resources/HYPERVISOR_ERROR").ValueAsString()}},
            {0x1000007E, std::wstring{rm.MainResourceMap().GetValue(L"Resources/SYSTEM_THREAD_EXCEPTION_NOT_HANDLED_M").ValueAsString()}},
            {0x1000007F, std::wstring{rm.MainResourceMap().GetValue(L"Resources/UNEXPECTED_KERNEL_MODE_TRAP_M").ValueAsString()}},
            {0x1000008E, std::wstring{rm.MainResourceMap().GetValue(L"Resources/KERNEL_MODE_EXCEPTION_NOT_HANDLED_M").ValueAsString()}},
            {0x100000EA, std::wstring{rm.MainResourceMap().GetValue(L"Resources/THREAD_STUCK_IN_DEVICE_DRIVER_M").ValueAsString()}},
            {0x4000008A, std::wstring{rm.MainResourceMap().GetValue(L"Resources/THREAD_TERMINATE_HELD_MUTEX").ValueAsString()}},
            {0xC0000218, std::wstring{rm.MainResourceMap().GetValue(L"Resources/STATUS_CANNOT_LOAD_REGISTRY_FILE").ValueAsString()}},
            {0xC000021A, std::wstring{rm.MainResourceMap().GetValue(L"Resources/WINLOGON_FATAL_ERROR").ValueAsString()}},
            {0xC0000221, std::wstring{rm.MainResourceMap().GetValue(L"Resources/STATUS_IMAGE_CHECKSUM_MISMATCH").ValueAsString()}},
            {0xDEADDEAD, std::wstring{rm.MainResourceMap().GetValue(L"Resources/MANUALLY_INITIATED_CRASH1").ValueAsString()}},

            // win32 exceptions
            {static_cast<uint32_t>(EXCEPTION_ACCESS_VIOLATION),         std::wstring{rm.MainResourceMap().GetValue(L"Resources/EXCEPTION_ACCESS_VIOLATION").ValueAsString()}},
            {static_cast<uint32_t>(EXCEPTION_ARRAY_BOUNDS_EXCEEDED),    std::wstring{rm.MainResourceMap().GetValue(L"Resources/EXCEPTION_ARRAY_BOUNDS_EXCEEDED").ValueAsString()}},
            {static_cast<uint32_t>(EXCEPTION_BREAKPOINT),               std::wstring{rm.MainResourceMap().GetValue(L"Resources/EXCEPTION_BREAKPOINT").ValueAsString()}},
            {static_cast<uint32_t>(EXCEPTION_DATATYPE_MISALIGNMENT),    std::wstring{rm.MainResourceMap().GetValue(L"Resources/EXCEPTION_DATATYPE_MISALIGNMENT").ValueAsString()}},
            {static_cast<uint32_t>(EXCEPTION_FLT_DENORMAL_OPERAND),     std::wstring{rm.MainResourceMap().GetValue(L"Resources/EXCEPTION_FLT_DENORMAL_OPERAND").ValueAsString()}},
            {static_cast<uint32_t>(EXCEPTION_FLT_DIVIDE_BY_ZERO),       std::wstring{rm.MainResourceMap().GetValue(L"Resources/EXCEPTION_FLT_DIVIDE_BY_ZERO").ValueAsString()}},
            {static_cast<uint32_t>(EXCEPTION_FLT_INEXACT_RESULT),       std::wstring{rm.MainResourceMap().GetValue(L"Resources/EXCEPTION_FLT_INEXACT_RESULT").ValueAsString()}},
            {static_cast<uint32_t>(EXCEPTION_FLT_INVALID_OPERATION),    std::wstring{rm.MainResourceMap().GetValue(L"Resources/EXCEPTION_FLT_INVALID_OPERATION").ValueAsString()}},
            {static_cast<uint32_t>(EXCEPTION_FLT_OVERFLOW),             std::wstring{rm.MainResourceMap().GetValue(L"Resources/EXCEPTION_FLT_OVERFLOW").ValueAsString()}},
            {static_cast<uint32_t>(EXCEPTION_FLT_STACK_CHECK),          std::wstring{rm.MainResourceMap().GetValue(L"Resources/EXCEPTION_FLT_STACK_CHECK").ValueAsString()}},
            {static_cast<uint32_t>(EXCEPTION_FLT_UNDERFLOW),            std::wstring{rm.MainResourceMap().GetValue(L"Resources/EXCEPTION_FLT_UNDERFLOW").ValueAsString()}},
            {static_cast<uint32_t>(EXCEPTION_ILLEGAL_INSTRUCTION),      std::wstring{rm.MainResourceMap().GetValue(L"Resources/EXCEPTION_ILLEGAL_INSTRUCTION").ValueAsString()}},
            {static_cast<uint32_t>(EXCEPTION_IN_PAGE_ERROR),            std::wstring{rm.MainResourceMap().GetValue(L"Resources/EXCEPTION_IN_PAGE_ERROR").ValueAsString()}},
            {static_cast<uint32_t>(EXCEPTION_INT_DIVIDE_BY_ZERO),       std::wstring{rm.MainResourceMap().GetValue(L"Resources/EXCEPTION_INT_DIVIDE_BY_ZERO").ValueAsString()}},
            {static_cast<uint32_t>(EXCEPTION_INT_OVERFLOW),             std::wstring{rm.MainResourceMap().GetValue(L"Resources/EXCEPTION_INT_OVERFLOW").ValueAsString()}},
            {static_cast<uint32_t>(EXCEPTION_INVALID_DISPOSITION),      std::wstring{rm.MainResourceMap().GetValue(L"Resources/EXCEPTION_INVALID_DISPOSITION").ValueAsString()}},
            {static_cast<uint32_t>(EXCEPTION_NONCONTINUABLE_EXCEPTION), std::wstring{rm.MainResourceMap().GetValue(L"Resources/EXCEPTION_NONCONTINUABLE_EXCEPTION").ValueAsString()}},
            {static_cast<uint32_t>(EXCEPTION_PRIV_INSTRUCTION),         std::wstring{rm.MainResourceMap().GetValue(L"Resources/EXCEPTION_PRIV_INSTRUCTION").ValueAsString()}},
            {static_cast<uint32_t>(EXCEPTION_SINGLE_STEP),              std::wstring{rm.MainResourceMap().GetValue(L"Resources/EXCEPTION_SINGLE_STEP").ValueAsString()}},
            {static_cast<uint32_t>(EXCEPTION_STACK_OVERFLOW),           std::wstring{rm.MainResourceMap().GetValue(L"Resources/EXCEPTION_STACK_OVERFLOW").ValueAsString()}},
            {static_cast<uint32_t>(EXCEPTION_GUARD_PAGE),               std::wstring{rm.MainResourceMap().GetValue(L"Resources/EXCEPTION_GUARD_PAGE").ValueAsString()}},
            {static_cast<uint32_t>(EXCEPTION_INVALID_HANDLE),           std::wstring{rm.MainResourceMap().GetValue(L"Resources/EXCEPTION_INVALID_HANDLE").ValueAsString()}},
            {static_cast<uint32_t>(EXCEPTION_POSSIBLE_DEADLOCK),        std::wstring{rm.MainResourceMap().GetValue(L"Resources/EXCEPTION_POSSIBLE_DEADLOCK").ValueAsString()}},
            {static_cast<uint32_t>(CONTROL_C_EXIT),                     std::wstring{rm.MainResourceMap().GetValue(L"Resources/CONTROL_C_EXIT").ValueAsString()}},
        };

        return exception_code_descriptions;
    }

    std::wstring_view get_unknown_exception_string()
    {
        static auto instance{Utility::GetResourceValue(L"Resources/UnknownException"sv)};
        return instance;
    }

    }
}
